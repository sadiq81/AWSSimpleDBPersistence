{"Name":"PullToRefresharp","Id":255,"Alias":"pulltorefresharp","Description":"# PullToRefresharp\n\n## Pull To Refresh for Android in `C#`\n\nAdd pull-to-refresh functionality to your Android app quickly and easily.\n\nPullToRefresharp is the only C# library that provides pull-to-refresh functionality to ListView, GridView, and ScrollView on Android. It is simple to integrate with, customizable and extensible.\n\n### Simple integration:\n\nUpdate your layout:\n\n```\n\u003cpulltorefresharp.views.ViewWrapper\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\u003e\n\n    \u003cpulltorefresharp.widget.GridView\n        android:id=\"@id/myGridView\" /\u003e\n\n\u003c/pulltorefresharp.views.ViewWrapper\u003e\n```\n\nHook into the `RefreshActivated` event\n\n```csharp\nvar gridView = FindViewById\u003cIPullToRefresharpView\u003e(Resource.Id.myGridView);\ngridView.RefreshActivated += (o, e) { RefreshMyContent(); };\n\n// when content refresh complete\ngridView.OnRefreshCompleted();\n\n```\n\n### Features\n\nOut of the box PullToFrefresharp gives you a clean pull-to-refresh header UI and assets. You can change the colors or image assets via XML attributes, or include your own fully custom header.\n\nIf you want to add pull-to-refresh to a view type other than GridView, ListView, or ScrollView, you can! Simply create a subclass of the view and implement the `IPullToRefreshWrappedView` interface (there\u0027s almost nothing to it, all you need to do is write a little bit of glue code to proxy most calls to `PullToRefresharp.Delegates.ViewDelegate`).\n\n### Fork it on GitHub!\n\n[PullToRefresharp on GitHub](http://github.com/bduncavage/PullToRefresharp)\n\nPullToRefresharp is free and open source software. If there\u0027s something you want to add, please do! The goal of PullToRefresharp is to provide a robust pull-to-refresh framework for all Xamarin.Android (and possiby Xamarin.iOS in the future) applications.\n\n","Version":"1.0.1","Summary":"Add pull-to-refresh to your Xamarin.Android apps.","QuickStart":"## PullToRefresharp\n\nIntegrating PullToRefresharp into your existing application requires only a small amount of work. Modifying your layout to use the PullToRefresharp view and widget, then hooking into the RefreshActivated event, and finally calling OnRefreshComplete when you\u0027re done refreshing your content is all that you need to do.\n\nLet\u0027s get started!\n\n### Modifying your layout\n\nThe first thing you need to replace is any ListView, GridView, or ScrollView you wish to enable pull-to-refresh on with the PullToRefresharp equivalent.\n\n```\n\u003cListView /\u003e\n```\n\nWould become:\n\n```\n\u003cpulltorefresharp.widget.ListView /\u003e\n```\n\nThe next, and last, thing you need to do to your layout is to wrap the view with a `ViewWrapper`. This is the bit that will inject the pull-to-refresh header and manage event handling (it\u0027s how PullToRefresharp can be used with more than just ListView).\n\n```\n\u003cpulltorefresharp.views.ViewWrapper\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\u003e\n\n    \u003cpulltorefresharp.widget.ListView /\u003e\n\n\u003c/pulltorefresharp.views.ViewWrapper\u003e\n```\n\nYou are now done integrating PullToRefresharp into your layout!\n\n### Hooking up Events\n\nYou\u0027ll want to know when a refresh has been activated. This is easy, just hook up a handler to your GridView, ListView, or ScrollView that has been PullToRefresharp-enabled.\n\n```\nvar gridView = FindViewById\u003cIPullToRefresharpView\u003e(Resource.Id.myGridView);\ngridView.RefreshActivated += (o, e) =\u003e { RefreshContent(); };\n```\n\nAs you can see, your GridView implements the `IPullToRefresharpView` interface. This interface exposes some useful methods and properties (such as enabling/disabling pull-to-refresh). Right now, we only care about the RefreshActivated event, this is raised when the user has pulled beyond the threshold and released.\n\nNow you will want to inform your IPullToRefreshView when you are done refreshing. This is done thusly:\n\n```\ngridView.OnRefreshCompleted();\n```\n\nThis causes the header to snapback up in an animated fashion.\n\n### Congratulations!\n\nYou\u0027re done! There is no more you need to do to start using PullToRefresharp. Also look at the source for `IPullToRefreshView` and `attrs.xml` to discover more advanced options (http://github.com/bduncavage/PullToRefresharp).\n","Hash":"eb26a714521972202fdca12024f5adeb","TargetPlatforms":["android"],"TrialHash":null}